// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package concurrent

import (
	"context"
	"sync"
)

// Ensure, that StoreInterfaceMock does implement StoreInterface.
// If this is not the case, regenerate this file with moq.
var _ StoreInterface = &StoreInterfaceMock{}

// StoreInterfaceMock is a mock implementation of StoreInterface.
//
//	func TestSomethingThatUsesStoreInterface(t *testing.T) {
//
//		// make and configure a mocked StoreInterface
//		mockedStoreInterface := &StoreInterfaceMock{
//			CreateMeetingDatumFunc: func(ctx context.Context, args CreateMeetingDatumArguments) error {
//				panic("mock out the CreateMeetingDatum method")
//			},
//		}
//
//		// use mockedStoreInterface in code that requires StoreInterface
//		// and then make assertions.
//
//	}
type StoreInterfaceMock struct {
	// CreateMeetingDatumFunc mocks the CreateMeetingDatum method.
	CreateMeetingDatumFunc func(ctx context.Context, args CreateMeetingDatumArguments) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateMeetingDatum holds details about calls to the CreateMeetingDatum method.
		CreateMeetingDatum []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Args is the args argument value.
			Args CreateMeetingDatumArguments
		}
	}
	lockCreateMeetingDatum sync.RWMutex
}

// CreateMeetingDatum calls CreateMeetingDatumFunc.
func (mock *StoreInterfaceMock) CreateMeetingDatum(ctx context.Context, args CreateMeetingDatumArguments) error {
	if mock.CreateMeetingDatumFunc == nil {
		panic("StoreInterfaceMock.CreateMeetingDatumFunc: method is nil but StoreInterface.CreateMeetingDatum was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Args CreateMeetingDatumArguments
	}{
		Ctx:  ctx,
		Args: args,
	}
	mock.lockCreateMeetingDatum.Lock()
	mock.calls.CreateMeetingDatum = append(mock.calls.CreateMeetingDatum, callInfo)
	mock.lockCreateMeetingDatum.Unlock()
	return mock.CreateMeetingDatumFunc(ctx, args)
}

// CreateMeetingDatumCalls gets all the calls that were made to CreateMeetingDatum.
// Check the length with:
//
//	len(mockedStoreInterface.CreateMeetingDatumCalls())
func (mock *StoreInterfaceMock) CreateMeetingDatumCalls() []struct {
	Ctx  context.Context
	Args CreateMeetingDatumArguments
} {
	var calls []struct {
		Ctx  context.Context
		Args CreateMeetingDatumArguments
	}
	mock.lockCreateMeetingDatum.RLock()
	calls = mock.calls.CreateMeetingDatum
	mock.lockCreateMeetingDatum.RUnlock()
	return calls
}
